# coding: utf-8

"""
CreditCardApi.py
Copyright 2015 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

from __future__ import absolute_import

import sys
import os

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class CreditCardApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def add_credit_card_charge(self, body, **kwargs):
        """
        Adds a new CreditCardCharge to Customer's CreditCard
        Creates a new `CreditCardCharge` and associates it to a `CreditCard`.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_credit_card_charge(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CreditCardCharge body: The `CreditCardCharge` object to be generated to a `CreditCard` it has the following fields\n- **id** its the id of the `CreditCardCharge` thats going to be generated after creation.\n- **creditCard** which is the identificator of the `CreditCard` to be charged\n- **customer** which is the id of the `Customer` associated with the `CreditCard`\n- **amount** which is the full amount of the charge\n- **currency** its the 3-letter ISO code for the currency.\n- **installments** its the amount of payments to divide the charge amount, it can be minumum 1 maximum 36\n- **taxAmount** the amount that accounts as taxes.\n- **paid** its the status of the charge. true if its paid, false if its not.\n- **description** which is the desciption of the charge being made.\n- **orderId** commerce order identificator\n- **thirdPartyId** commercer third party tax identification (required)
        :return: CreditCardCharge
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'body' is set
        if body is None:
            raise ValueError("Missing the required parameter `body` when calling `add_credit_card_charge`")

        all_params = ['body']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_credit_card_charge" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/charge/credit_card'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['api_key']

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='CreditCardCharge',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_credit_card_charge_by_id(self, id, **kwargs):
        """
        Retrieve a CreditCardCharge by ID
        Get the details of an existing `CreditCardCharge`. This method only requires an unique `CreditCardCharge` identifier `id` that was returned upon `CreditCardCharge` creation.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_credit_card_charge_by_id(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identification of `CreditCardCharge` that needs to be retrieved (required)
        :return: CreditCardCharge
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'id' is set
        if id is None:
            raise ValueError("Missing the required parameter `id` when calling `get_credit_card_charge_by_id`")

        all_params = ['id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_credit_card_charge_by_id" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/charge/credit_card/{id}'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['api_key']

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='CreditCardCharge',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def add_credit_card(self, customer_id, body, **kwargs):
        """
        Adds a new Credit Card payment method to the Customer
        Creates a new `CreditCard` and associates it to the `Customer`

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_credit_card(customer_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str customer_id: Identificaiton of `Customer` to associate the new `CreditCard` (required)
        :param CreditCardCreate body: The `CreditCard` object to be associated to the `Customer`, it has the following fields\n- **primaryAccountNumber** which is the number as it appears on the credit card.\n- **cardVerificationCode** which is the security code usually found in the back o the credit card.\n- **expirationMonth** which is the month of expiration of the credit card, its entered as a numeric value with single digits or double digits like 5 or 05 to represent may.\n- **expirationYear** which is the year of expiration of the credit card in its complete numeric value.\n- **cardHolderName** which is the name of the card holder exactly as it appears on the credit card.\n- **billingAddress** which is the billing address of the credit card that consists of two address lines, the city, the country, the postalCode and the state of the address. (required)
        :return: CreditCard
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'customer_id' is set
        if customer_id is None:
            raise ValueError("Missing the required parameter `customer_id` when calling `add_credit_card`")
        # verify the required parameter 'body' is set
        if body is None:
            raise ValueError("Missing the required parameter `body` when calling `add_credit_card`")

        all_params = ['customer_id', 'body']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_credit_card" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/customer/{customer_id}/credit_card_token'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}
        if 'customer_id' in params:
            path_params['customer_id'] = params['customer_id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['api_key']

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='CreditCard',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_credit_card_by_id(self, customer_id, card_id, **kwargs):
        """
        Retrieve a CreditCard by ID
        Get the details of an existing `CreditCard`. This method only requires an unique `CreditCard` identifier `id` that was returned upon `CreditCard` creation.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_credit_card_by_id(customer_id, card_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str customer_id: Identification of `Customer` associated with the `CreditCard` (required)
        :param str card_id: Identification of `CreditCard` that needs to be retrieved (required)
        :return: CreditCard
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'customer_id' is set
        if customer_id is None:
            raise ValueError("Missing the required parameter `customer_id` when calling `get_credit_card_by_id`")
        # verify the required parameter 'card_id' is set
        if card_id is None:
            raise ValueError("Missing the required parameter `card_id` when calling `get_credit_card_by_id`")

        all_params = ['customer_id', 'card_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_credit_card_by_id" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/customer/{customer_id}/credit_card/{card_id}'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'customer_id' in params:
            path_params['customer_id'] = params['customer_id']
        if 'card_id' in params:
            path_params['card_id'] = params['card_id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['api_key']

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='CreditCard',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_credit_card_by_id(self, customer_id, card_id, **kwargs):
        """
        Deletes a CreditCard by ID
        Deletes a `CreditCard` when its `id` matches the parameters. Only available when `CreditCard` does not have associated Charges.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_credit_card_by_id(customer_id, card_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str customer_id: Identificaiton of `Customer` associated with the `CreditCard` (required)
        :param str card_id: Identification of `CreditCard` to be deleted (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'customer_id' is set
        if customer_id is None:
            raise ValueError("Missing the required parameter `customer_id` when calling `delete_credit_card_by_id`")
        # verify the required parameter 'card_id' is set
        if card_id is None:
            raise ValueError("Missing the required parameter `card_id` when calling `delete_credit_card_by_id`")

        all_params = ['customer_id', 'card_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_credit_card_by_id" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/customer/{customer_id}/credit_card/{card_id}'.replace('{format}', 'json')
        method = 'DELETE'

        path_params = {}
        if 'customer_id' in params:
            path_params['customer_id'] = params['customer_id']
        if 'card_id' in params:
            path_params['card_id'] = params['card_id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['api_key']

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def refund_credit_card_charge(self, body, **kwargs):
        """
        Try to refund a CreditCardCharge to a Customer's CreditCard
        Refunds a new `CreditCardCharge` that was successful to a `CreditCard`. It only can be done within the same day of the `CreditCardCharge`

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.refund_credit_card_charge(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CreditCardRefund body: - **id** It is the id of the `CreditCardCharge` thats going to be refunded. (required)
        :return: CreditCardCharge
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'body' is set
        if body is None:
            raise ValueError("Missing the required parameter `body` when calling `refund_credit_card_charge`")

        all_params = ['body']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method refund_credit_card_charge" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/refund/credit_card'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['api_key']

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='CreditCardCharge',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response
